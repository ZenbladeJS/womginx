user nginx nginx;
worker_processes auto;
pid /run/nginx.pid;
include /etc/nginx/modules-enabled/*.conf;/**/

events {
    worker_connections 1024;
}

http {
    include /etc/nginx/mime.types;

    resolver 1.1.1.1;

    # ddos protection
    client_body_timeout 10s;
    client_header_timeout 10s;
    proxy_connect_timeout 20s;
    # these are very lenient limtis. there should be no reason why a
    # client will request 60 requests per second for a straight 8.33 seconds
    limit_req_zone $binary_remote_addr zone=limitreq:20m rate=30r/s;
    limit_req zone=limitreq burst=500 nodelay;
    limit_req_status 429;
    limit_conn_zone $binary_remote_addr zone=limitconn:20m;
    limit_conn limitconn 10;

    # domain blacklist. blacklisting www.example.com as an example
    map $dest_host $blacklist {
        default 0;
        'www.example.com' 1;
    }
    # blacklist user agents
    # the following is a default list that simply blocks all bots. credit to https://stackoverflow.com/a/24820722
    map $http_user_agent $blacklist_useragent {
        default 0;
        ~*(google|bing|yandex|msnbot) 1;
        ~*(AltaVista|Googlebot|Slurp|BlackWidow|Bot|ChinaClaw|Custo|DISCo|Download|Demon|eCatch|EirGrabber|EmailSiphon|EmailWolf|SuperHTTP|Surfbot|WebWhacker) 1;
        ~*(Express|WebPictures|ExtractorPro|EyeNetIE|FlashGet|GetRight|GetWeb!|Go!Zilla|Go-Ahead-Got-It|GrabNet|Grafula|HMView|Go!Zilla|Go-Ahead-Got-It) 1;
        ~*(rafula|HMView|HTTrack|Stripper|Sucker|Indy|InterGET|Ninja|JetCar|Spider|larbin|LeechFTP|Downloader|tool|Navroad|NearSite|NetAnts|tAkeOut|WWWOFFLE) 1;
        ~*(GrabNet|NetSpider|Vampire|NetZIP|Octopus|Offline|PageGrabber|Foto|pavuk|pcBrowser|RealDownload|ReGet|SiteSnagger|SmartDownload|SuperBot|WebSpider) 1;
        ~*(Teleport|VoidEYE|Collector|WebAuto|WebCopier|WebFetch|WebGo|WebLeacher|WebReaper|WebSauger|eXtractor|Quester|WebStripper|WebZIP|Wget|Widow|Zeus) 1;
        ~*(Twengabot|htmlparser|libwww|Python|perl|urllib|scan|Curl|email|PycURL|Pyth|PyQ|WebCollector|WebCopy|webcraw) 1;
    }
    # set scheme appropriately in case nginx is sitting behind servers like heroku
    map $http_x_forwarded_proto $relativescheme {
        default $http_x_forwarded_proto;
        '' $scheme;
    } 

    # websocket headers
    map $http_upgrade $connection_upgrade {
        default Upgrade;
        '' close;
    }

    map '' $proxy_prefix {
        default $relativescheme://$host;
    }

    map $targeturl $dest_host {
        default '';
        ~^https?://([^/]+) $1;
    }
    # convert wss://domain.com to https://domain.com
    map $targeturl $dest_fullwebsocketurl {
        default $targeturl;
        ~^ws(s)?://(.+) http$1://$2;
    }
    # get targeturl destination from referrer
    map $http_referer $dest_referrerhost {
        default '';
        ~^https?://[^/]+/main(/[^_/]+_)?/(?<targeturl>https?://[^/]+) $targeturl;
    }
    # use $request_uri for proxy cookie rewriting where there is no $targeturl variable
    map $request_uri $dest_hostwithscheme {
        default '';
        ~^/main(/[^_/]+_)?/(https?://[^/]+) $2;
    }
    # header rewrites
    map $http_referer $rewrite_referer {
        default $http_referer;
        ~^https?://[^/]+/main(/[^_/]+_)?/(?<targeturl>.*) $targeturl;
    }
    map $http_origin $rewrite_origin {
        default $dest_hostwithscheme;
        '' '';
    }
    server {
        
        server_name womginx.synricha.org;

        listen 80;
        listen 443 ssl;
        ssl_certificate /etc/letsencrypt/live/womginx.synricha.org/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/womginx.synricha.org/privkey.pem;

        merge_slashes off;
        proxy_ssl_server_name on;
        error_page 404 = @referrer-handler;

        # reason for putting rewrites here is putting them in parent of nested locations will
        # not apply to child locations
        # use undecoded uri as location for proxying encoded urls
        rewrite ^ $request_uri;
        # convert /main/http://domain.com to /main/http://domain.com/
        # convert /main/http://domain.com?a to /main/http://domain.com/?a
        rewrite ^(/main/https?://[^/?]*)/?(.*) $1/$2;


        #### static file requests handling ####

        # serve static files, disallow access to .git directories, and ignore prefixes starting with /main/
        location ~^((?!/\.git|^/main/).)*$ {
            alias /home/binary/womginx/public$uri;
            # if no file is found, pass it to @referrer-handlerx
        }
        location = / {
            if ($dest_referrerhost = '') {
                rewrite ^ /index.html last;
            }
            # if referrer is valid, pass it to @referrer-handler
            return 404;
        }
        # catch links like '/assets.png' and redirect them by their referrer if referrer is valid
        location @referrer-handler {
            # if referrer doesn't exist, send 404 page
            if ($dest_referrerhost = '') {
                return 404;
            }
            # if it exists, send appropriate redirection
            return 302 $proxy_prefix/main/$
$request_uri;
        }


        #### proxy requests handling ####
        location /main {
            # reason for including all proxy header modifications here is because apparently,
            # using proxy_set_header in a child block automatically negates all parent proxy_set_header
            # directives.
            # disable disabling inline scripts (if proxy sends a content-security-policy like that over)
            proxy_hide_header Content-Security-Policy;
            # prevent proxied servers' HSTS headers from affecting the client
            proxy_hide_header Strict-Transport-Security;
            # rewrite referer header
            proxy_set_header Referer $rewrite_referer;
            # rewrite origin header
            proxy_set_header Origin $rewrite_origin;
            # websocket headers
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;
            # fix "upstream sent too big header/body"
            proxy_buffer_size 16k;
            # proxy_buffer_size + 8k
            proxy_busy_buffers_size 24k;
            # numOfBuffers * bufferSize >= proxy_buffer_size
            proxy_buffers 4 16k; 
            # client can only upload files less than 100M
            client_max_body_size 100M;

            # handle websocket connections
            location ~^/main/wss?/(?<targeturl>.+){
                proxy_http_version 1.1;
                
                proxy_pass $dest_fullwebsocketurl;
            }
            location ~^/main/static/(?<targeturl>.*)$ {
                # blacklist urls
                if ($blacklist) {
                    return 403 'Sorry. The owner of this proxy decided to disallow access to this content.';
                }
                # blacklist user agents
                if ($blacklist_useragent) {
                    return 403 'Sorry, you are not allowed to access this content.';
                }

                # handle proxy sending redirection requests
                proxy_redirect ~^(https?://.+) $proxy_prefix/main/$1;

                
                proxy_pass $targeturl;
            }
        }
    }
}
